' {$STAMP BS2}
' {$PBASIC 2.5}

'Scribbler include code version 2007.07.25

'---[Pin Definitions]----------------------------------------------------------

LEDLeft      PIN 0
LWhisker     PIN 1
RWhisker       PIN 2
LightLeft      PIN 3
ObsTxLeft       PIN 4
ObsTxRight        PIN 5
ObsRx           PIN 6
LEDRight           PIN 7
LightCenter        PIN 8
LIghtRight       PIN 9
Servo2         PIN 10
Servo3         PIN 11
MotorRight      PIN 12
MotorLeft       PIN 13
TripDrain      PIN 14
Speaker       PIN 15

'---[Pin Initializations]------------------------------------------------------

OUTS = %0000000000000111
DIRS = %1111111100000000

Moves           VAR Byte

MoveRight       VAR Byte
MoveLeft        VAR Byte
MoveTime        VAR Byte

leftstop        VAR Byte
rightstop       VAR Byte

RightMotor      VAR Byte    'byte
LeftMotor       VAR Byte    'byte

LeftObstacle    VAR Bit
RightObstacle   VAR Bit

'  ScrT0 VAR Bit          '~ does inverse of input
'  ScrT1 VAR Bit

Counter6 VAR Byte

ScrW0           VAR Word
ScrW1           VAR Word

ScrB0           VAR ScrW0.LOWBYTE
ScrB1           VAR ScrW0.HIGHBYTE
ScrB2           VAR ScrW1.LOWBYTE
ScrB3           VAR ScrW1.HIGHBYTE

ScrN0           VAR ScrB0.LOWNIB
ScrN1           VAR ScrB0.HIGHNIB
ScrN2           VAR ScrB1.LOWNIB
ScrN3           VAR ScrB1.HIGHNIB

ScrT0           VAR ScrB3.BIT0
ScrT1           VAR ScrB3.BIT1
ScrT2           VAR ScrB3.BIT2
ScrT3           VAR ScrB3.BIT3
ScrT4           VAR ScrB3.BIT4
ScrT5           VAR ScrB3.BIT5
ScrT6           VAR ScrB3.BIT6
ScrT7           VAR ScrB3.BIT7

'Moves           VAR ScrB0



CoinFlip        VAR Word

'---[Variable Initialization]--------------------------------------------------

LeftMotor = 128
RightMotor = 128

Green:
  GOSUB ReadObstacle
  IF (LeftObstacle = 1 AND RightObstacle = 0) THEN
    LeftMotor = 28: RightMotor = 34: MoveTime = 200
    GOSUB MotorSet
  ELSE
    LeftMotor = 178: RightMotor = 178: MoveTime = 174
    GOSUB MotorSet
  ENDIF
END

'---[Set Motor Speeds]---------------------------------------------------------



MotorSet:
    READ 2, rightstop
    'readout =  ((650 + rightstop - 128) + RightMotor)
    'readout =  ((760 -128) + RightMotor)
    'DEBUG "Right servo gets   ", DEC readout,"  stop= ",? rightstop, CR
    READ 1, leftstop
    'readout =  ((650 + leftstop + 128) - LeftMotor)
    'readout = ((748 + 128) - LeftMotor)
    'DEBUG "Left servo gets   ", DEC readout,"  stop= ",? leftstop, CR
  DO  'FOR Counter6 = 0 TO MoveTime
    Counter6 = Counter6 + 1
     DEBUG ?Counter6
    PULSOUT MotorRight, ((650 + rightstop - 128) + RightMotor) 'ScrB0 is calibrated value from eeprom
    'PULSOUT MotorRight, ((760 -128) + RightMotor) 'First version that worked

    PULSOUT MotorLeft, ((650 + leftstop + 128) - LeftMotor)  'ScrB1 is calibrated value from eeprom
    'PULSOUT MotorLeft, ((748 + 128) - LeftMotor)  'First version that worked
  PAUSE 5
  LOOP
RETURN



'---[Read Obstacle Sensors]----------------------------------------------------

ReadObstacle:            'set up for whisker sensors. Left Pin 1 Right Pin 2
  ScrT0 = ~ IN1          '~ does inverse of input
  ScrT1 = ~ IN2          'if IN1 is 0 then whisker is made

  LeftObstacle = ScrT0
  RightObstacle = ScrT1

RETURN
