' {$STAMP BS2}
' {$PBASIC 2.5}

'Scribbler calibration code version 2005.09.08(1.2)

'---[Pin Definitions]----------------------------------------------------------

Spare1      PIN 0
LWhisker     PIN 1
RWhisker       PIN 2
Spare2      PIN 3
ObsTxLeft       PIN 4
ObsTxRight        PIN 5
ObsRx           PIN 6
Spare3           PIN 7
Spare4        PIN 8
Servo1       PIN 9
Servo2         PIN 10
Servo3         PIN 11
MotorRight      PIN 12
MotorLeft       PIN 13
TripDrain      PIN 14
Speaker       PIN 15

'---[Pin Initializations]------------------------------------------------------

OUTS = %0000000000000111
DIRS = %1111111100000000

'---[Global Variables]---------------------------------------------------------

Lights          VAR Byte(3)

ScrW0           VAR Word
ScrW1           VAR Word

RgtMot           VAR ScrW0.LOWBYTE
LftMot           VAR ScrW0.HIGHBYTE
MvTm           VAR ScrW1.LOWBYTE
INDEX           VAR ScrW1.HIGHBYTE

RightMotor      VAR RgtMot
LeftMotor       VAR LftMot
MoveTime        VAR MvTm

i               VAR Word
Dir             VAR Bit
Pointer         VAR Word
Offset          VAR Byte
BestOffset      VAR Byte
Accum           VAR Word
MinSum          VAR Word
Checksum        VAR Byte

Sum             VAR Word(3)

DATA @16, (512)

READ 15, RgtMot
WRITE 15, RgtMot + 1
PAUSE 1000
WRITE 15, 0
SELECT RgtMot

  CASE 0        'Powerup, or one reset: Print claibration values.

    READ 0, RgtMot
    DEBUG "Right Multiplier:   $", HEX2 RgtMot, CR
    READ 1, RgtMot
    DEBUG "Left Multiplier:    $", HEX2 RgtMot, CR
    READ 2, RgtMot
    DEBUG "Reserved:           $", HEX2 RgtMot, CR
    READ 3, RgtMot
    DEBUG "Motor Checksum:     $", HEX2 RgtMot, CR
    READ 4, RgtMot
    DEBUG "Right Light Subtr:  $", HEX2 RgtMot, CR
    READ 5, RgtMot
    DEBUG "Center Light Subtr: $", HEX2 RgtMot, CR
    READ 6, RgtMot
    DEBUG "Left  Light Subtr:  $", HEX2 RgtMot, CR
    READ 7, RgtMot
    DEBUG "Light Checksum:     $", HEX2 RgtMot, CR, CR

  CASE 1         'Two resets: Veer left a little more.

    READ 0, RightMotor, LeftMotor
    LeftMotor = LeftMotor - 1
    RightMotor = RightMotor + 1
    IF (LeftMotor <> 255 AND RightMotor <> 0) THEN
      HIGH LedLeft
      GOSUB WriteMotors
      PAUSE 100
      LOW LedLeft
    ENDIF

  CASE 2         'Three resets: Veer right a little more.

    READ 0, RightMotor, LeftMotor
    LeftMotor = LeftMotor + 1
    RightMotor = RightMotor - 1
    IF (LeftMotor <> 0 AND RightMotor <> 255) THEN
      HIGH LedRight
      GOSUB WriteMotors
      PAUSE 100
      LOW LedRight
    ENDIF

  CASE 3          'Four resets: Test motor calibration.

    PAUSE 1000
    LeftMotor = 203
    RightMotor = 203
    MoveTime = 120
    GOSUB MotorSet
    PAUSE 500
    LeftMotor = 53
    RightMotor = 53
    MoveTime = 120
    GOSUB MotorSet

  CASE 4          'Five resets: Calibrate light sensors.

    Pointer = 16

    PAUSE 2000

    FREQOUT Speaker, 585, 329
    FREQOUT Speaker, 292, 311
    FREQOUT Speaker, 292, 329
    FREQOUT Speaker, 292, 391
    FREQOUT Speaker, 585, 523

    PAUSE 500

    Checksum = 0
    LeftMotor = 78
    RightMotor = 178
    GOSUB MotorSetIndef
    FOR i = 0 TO 255
      GOSUB ReadLight
      FOR RgtMot = 0 TO 2
        Sum(RgtMot) = Sum(RgtMot) + Lights(RgtMot)
      NEXT
    NEXT
    FOR i = 0 TO 2
      Sum(i) = Sum(i) >> 8
    NEXT
    RgtMot = Sum(0) MAX Sum(1) MAX Sum(2)
    FOR i = 0 TO 2
      LftMot = Sum(i) - RgtMot
      WRITE i + 4, LftMot
      Checksum = Checksum - LftMot
    NEXT
    WRITE 7, Checksum

    GOSUB MotorStop

    PAUSE 500

    FREQOUT Speaker, 152, 659, 1046
    PAUSE 35
    FREQOUT Speaker, 562, 659, 1046

 CASE 5          'Six resets: Set default motor and light calibration.

    GOSUB SetDefault
    FREQOUT Speaker, 50, 600
    PAUSE 50
    FREQOUT Speaker, 100, 600

ENDSELECT
END

'---[Set Default Calibration Values]-------------------------------------------

SetDefault:
  FOR i = 0 TO 7
    IF (i < 2) THEN
      WRITE i, 128
    ELSE
      WRITE i, 0
    ENDIF
  NEXT
  RETURN

'---[Write Tweaked Motor Values]-----------------------------------------------

WriteMotors:
  WRITE 0, RightMotor, LeftMotor
  RETURN

'---[Read Light Sensors]-------------------------------------------------------

ReadLight:
  HIGH LightLeft
  HIGH LightCenter
  HIGH LightRight
  PAUSE 3
  Accum = 0
  FOR MvTm = 0 TO 2
    RCTIME LightRight + MvTm, 1, ScrW0
    IF (ScrW0 = 0) THEN ScrW0 = 65535
    Accum = Accum + (ScrW0 >> 2)
    INDEX = NCD ScrW0 - 1   'NCD is unary operator Primary EncoderNCD is a
    'fast way TO get an answer TO the question "What is the largest power of
    'two that this value is greater than OR equal TO?" The value NCD returns
    'will be that power, plus one.
    ScrW0 = ScrW0 << (15 - INDEX)
    LOOKDOWN ScrW0.HIGHBYTE, <=[133, 139, 145, 152, 158, 165, 173, 181, 189, 197, 206, 215, 224, 234, 245, 255], ScrW0
    Lights(MvTm) = ~(INDEX << 4 + ScrW0)
  NEXT
  Accum = 20 - (Accum / 125)
  IF (Accum & 8000) THEN
    GOSUB MotorStop
    FOR i = 0 TO 64
      PULSOUT 11, 100
      PAUSE 20
    NEXT
    END
  ENDIF
  FREQOUT Speaker, Accum, Lights(1) * 10
RETURN

'---[Set Motor Speeds]---------------------------------------------------------

MotorStop:
  LeftMotor = 128
  RightMotor = 128

MotorSetIndef:
  MoveTime = 0

MotorSet:
  READ 0, INDEX
  PULSOUT MotorRight, (RightMotor - 128) * INDEX >> 7 + 256 & 511 MIN 156 * 10 - 560
  PAUSE 1
  IF (MoveTime) THEN PULSOUT MotorRight, MoveTime * 10 + 1000
  READ 1, INDEX
  PULSOUT MotorLeft, (LeftMotor - 128) * INDEX >> 7 + 256 & 511 MIN 156 * 10 - 560
  PAUSE 1
  IF (MoveTime) THEN PULSOUT MotorLeft, MoveTime * 10 + 1000
  PAUSE MoveTime * 25
RETURN

'---[End of Program]-----------------------------------------------------------