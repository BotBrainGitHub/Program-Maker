
' {$STAMP BS2}
' {$PBASIC 2.5}

'Scribbler include code version 2007.07.25

'---[Pin Definitions]----------------------------------------------------------

LEDLeft      PIN 0
LWhisker     PIN 1
RWhisker       PIN 2
LightLeft      PIN 3
ObsTxLeft       PIN 4
ObsTxRight        PIN 5
ObsRx           PIN 6
LEDRight           PIN 7
LightCenter        PIN 8
LIghtRight       PIN 9
Servo2         PIN 10
Servo3         PIN 11
MotorRight      PIN 12
MotorLeft       PIN 13
TripDrain      PIN 14
Speaker       PIN 15

'---[Pin Initializations]------------------------------------------------------

OUTS = %0000000000000111
DIRS = %1111111100000000

'---[Global Variables]---------------------------------------------------------


ScrW0           VAR Word
ScrW1           VAR Word

ScrB0           VAR ScrW0.LOWBYTE
ScrB1           VAR ScrW0.HIGHBYTE
ScrB2           VAR ScrW1.LOWBYTE
ScrB3           VAR ScrW1.HIGHBYTE

ScrN0           VAR ScrB0.LOWNIB
ScrN1           VAR ScrB0.HIGHNIB
ScrN2           VAR ScrB1.LOWNIB
ScrN3           VAR ScrB1.HIGHNIB

ScrT0           VAR ScrB3.BIT0
ScrT1           VAR ScrB3.BIT1
ScrT2           VAR ScrB3.BIT2
ScrT3           VAR ScrB3.BIT3
ScrT4           VAR ScrB3.BIT4
ScrT5           VAR ScrB3.BIT5
ScrT6           VAR ScrB3.BIT6
ScrT7           VAR ScrB3.BIT7

Moves           VAR ScrB0

MoveRight       VAR ScrB0
MoveLeft        VAR ScrB1
MoveTime        VAR ScrB2

CoinFlip        VAR Word

'Lights          VAR B6

'RightLight      VAR B6
'CenterLight     VAR B7
'LeftLight       VAR B8

'RefLights       VAR B9

'RefRightLight   VAR B9
'RefCenterLight  VAR B10
'RefLeftLight    VAR B11

'Readout         VAR Word  'for debugging purposes
leftstop        VAR Byte
rightstop       VAR Byte

Counter0        VAR Byte
Counter1        VAR Byte
Counter2        VAR Byte
Counter3        VAR Byte
Counter4        VAR Byte
Counter5        VAR Byte

'ResetCount      VAR B14.NIB0  'Was ScrN0. Changed for persistence.

'Reserved0       VAR B14.NIB1
Counter6       VAR Byte
Counter7       VAR Byte

'Counter6        VAR BYTE
'Counter7       VAR Byte

Motors          VAR Byte

RightMotor      VAR Byte    'byte
LeftMotor       VAR Byte    'byte

LineCount       VAR Nib
ObstacleCount   VAR Nib
StallCount      VAR Nib



LeftObstacle    VAR Bit
RightObstacle   VAR Bit

Flags           VAR Byte

Flag_green      VAR Flags.BIT7
Flag_yellow     VAR Flags.BIT6
Flag_orange     VAR Flags.BIT5
Flag_red        VAR Flags.BIT4
Flag_magenta    VAR Flags.BIT3
Flag_purple     VAR Flags.BIT2
Flag_blue       VAR Flags.BIT1
Stalled         VAR Flags.BIT0

Num1            VAR Byte

'---[Protect Calibration Data in EEPROM]---------------------------------------

'DATA @0, (16)

'---[Count Reset Button Presses]-----------------------------------------------

'READ 15, ResetCount
'WRITE 15, ResetCount + 1 MAX 15
'PAUSE 500
'WRITE 15, 0

'---[Variable Initialization]--------------------------------------------------

LeftMotor = 128
RightMotor = 128

'---[Check Calibration Values and Repair]--------------------------------------

'FOR ScrN1 = 0 TO 4 STEP 4
 ' ScrB1 = 0
'  FOR ScrB2 = ScrN1 TO ScrN1 + 3
'    READ ScrB2, ScrB3
'    ScrB1 = ScrB1 + ScrB3
'  NEXT
'  IF (ScrB1) THEN
'    FOR ScrB2 = ScrN1 TO ScrN1 + 3
'      WRITE ScrB2, 128 << ScrN1
'    NEXT
'  ENDIF
'NEXT

'---[Initialize Random Number Generator]---------------------------------------

HIGH LightLeft
PAUSE 1
RCTIME LightLeft, 1, CoinFlip

'---[Main Program: Green]------------------------------------------------------

Green:
  GOSUB ReadObstacle
  IF (LeftObstacle = 1 AND RightObstacle = 0) THEN
    LeftMotor = 28: RightMotor = 34: MoveTime = 200
    GOSUB MotorSet
  ELSE
    LeftMotor = 178: RightMotor = 178: MoveTime = 174
    GOSUB MotorSet
  ENDIF
END

'---[Set Motor Speeds]---------------------------------------------------------



MotorSet:
    READ 2, rightstop
    'readout =  ((650 + rightstop - 128) + RightMotor)
    'readout =  ((760 -128) + RightMotor)
    'DEBUG "Right servo gets   ", DEC readout,"  stop= ",? rightstop, CR
    READ 1, leftstop
    'readout =  ((650 + leftstop + 128) - LeftMotor)
    'readout = ((748 + 128) - LeftMotor)
    'DEBUG "Left servo gets   ", DEC readout,"  stop= ",? leftstop, CR
  DO  'FOR Counter6 = 0 TO MoveTime
    Counter6 = Counter6 + 1
     DEBUG ?Counter6, ?MoveTime
    PULSOUT MotorRight, ((650 + rightstop - 128) + RightMotor) 'ScrB0 is calibrated value from eeprom
    'PULSOUT MotorRight, ((760 -128) + RightMotor) 'First version that worked

    PULSOUT MotorLeft, ((650 + leftstop + 128) - LeftMotor)  'ScrB1 is calibrated value from eeprom
    'PULSOUT MotorLeft, ((748 + 128) - LeftMotor)  'First version that worked
  PAUSE 5
  LOOP
RETURN



'---[Read Obstacle Sensors]----------------------------------------------------

ReadObstacle:            'set up for whisker sensors. Left Pin 1 Right Pin 2
  ScrT0 = ~ IN1          '~ does inverse of input
  ScrT1 = ~ IN2          'if IN1 is 0 then whisker is made

  LeftObstacle = ScrT0
  RightObstacle = ScrT1

RETURN

'---[End of Program]-----------------------------------------------------------
